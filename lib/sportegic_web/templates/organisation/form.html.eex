<%= form_for @changeset, @action, fn f -> %>
  <div class="row">
    <div class="input-field col s12 grey-text lighten-1">
      <%= label f, :name, "Organisation Name" %>
      <%= text_input f, :name, [ class: "validate grey-text lighten-2", required: "true", type: "text", pattern: "^[_A-z0-9]*((-|\s|'|!)*[_A-z0-9])*$"]%>
      <%= error_tag f, :name %>
      <span class="helper-text" data-error="Please provide full account name"></span>
    </div>
    <div class="input-field col s12 no-bottom-margin">
      <%= label f, :display, "Common Name e.g. Bulls", [for: "fourteen"] %>
      <%= text_input f, :display, [class: "validate grey-text lighten-2", required: "true", data: [length: "14"], id: "fourteen", maxlength: "14", pattern: "^[_A-z0-9]*((-|\s|'|!)*[_A-z0-9])*$"] %>
      <%= error_tag f, :display %>
      <span class="helper-text" data-error="A short name commonly used"></span>
    </div>
    <div class="input-field col s12 grey-text grey-text lighten-2 ">
          <%= text_input f, :city, [id: "address", placeholder: "Enter Home City/Suburb", style: "color: #9c9a9a;"] %>
          <label for="address"></label>
    </div>
    <div id="msg" class="hide input-field col s12 grey-text lighten-2 left valign-wrapper">
      <div class="row">
        <div class="col s2">
          <div class="preloader-wrapper small active right-align">
            <div class="spinner-layer spinner-blue-only">
              <div class="circle-clipper left">
                <div class="circle"></div>
              </div><div class="gap-patch">
                <div class="circle"></div>
              </div><div class="circle-clipper right">
                <div class="circle"></div>
              </div>
            </div>
          </div>
        </div>
        <div class="col s10">
          <div ><h6 class="">Grabbing your timezone ...</h6></div>
        </div>
      </div>
      
      
    </div>
    
    <div class="right">
      <%= submit  [id: "submit", class: "btn-floating btn-large z-depth-0 waves-effect waves-light green", disabled: "true"] do %>
         <i class="large material-icons">save</i>
      <% end %>
    </div>  
    
  </div>

  <%= hidden_input f, :home_city, [id: "home_city"] %>
   <%= hidden_input f, :timezone, [id: "timezone"] %>
<% end %>

    
<script>
      var autocomplete;

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        address = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('address')),
            {types: ['(cities)']});

        address.setFields(['address_component', 'formatted_address', 'geometry']);

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        address.addListener('place_changed', fillInAddress);

        var input = document.getElementById('address');
        google.maps.event.addDomListener(input, 'keydown', function(event) { 
          if (event.keyCode === 13) { 
              event.preventDefault(); 
              document.querySelector("button[type=submit").focus()
          }
        }); 
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = address.getPlace();
        console.log(place)
        document.getElementById("home_city").value = place.formatted_address;
        
        var targetDate = new Date() // Current date/time of user computer
        var timestamp = targetDate.getTime()/1000 + targetDate.getTimezoneOffset() * 60 // Current UTC date/time expressed as seconds since midnight, January 1, 1970 UTC
        let msg = document.getElementById("msg");
        msg.classList.remove("hide");

        fetch('https://maps.googleapis.com/maps/api/timezone/json?location=' + place.geometry.location.lat() + ',' + place.geometry.location.lng() + '&timestamp=' + timestamp + '&key=AIzaSyBhXHpSt2T2rHE-kP_Vrgw0M5GYm9ui8NI')
        .then(function(response) {
          return response.json();
        })
        .then(function(tz) {
          document.getElementById("timezone").value = tz.timeZoneId;
          setTimeout(function () {
            msg.classList += " hide";
            document.getElementById("submit").removeAttribute("disabled");
          }, 2000);
          
        });
      }

  

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDlfaS66hsZ6n1yIUpyd_2QGQ7zpDZ12Pk&libraries=places&callback=initAutocomplete"
        async defer></script>
